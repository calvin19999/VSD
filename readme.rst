=======
VSD
=======

Contents
 * `Day0`_
    * `Yosys Installation`_
    * `OpenSTA Installation`_
    * `Ngspice Installation`_
    * `Iverilog Installation`_
    * `Gtkwave Installation`_
 * `Day1`_
    * `Introduction to iverilog design testbench`_
    * `Labs using iverilog and gtkwave`_
    * `Labs using Yosys and Sky130 PDKs`_
 * `Day2`_
    * `Understanding .lib`_
    * `Hierarchical vs Flat Synthesis`_
    * `Synthesis Simulation`_
    * `Various Flop Coding Styles and optimization`_
 * `Day3`_



Day0
----------
Yosys Installation
~~~~~~~~~~~~~~

.. code-block:: console

    git clone https://github.com/YosysHQ/yosys.git
    cd yosys
    sudo apt install make
    sudo apt-get install build-essential clang bison flex libreadline-dev gawk tcl-dev libffi-dev git graphviz xdot pkg-config python3 libboost-system-dev libboost-python-dev libboost-filesystem-dev zlib1g-dev
    make
    sudo make install
    
   
.. image:: /picture/yosys.png
    :width: 500
    
OpenSTA Installation
~~~~~~~~~~~~~

https://github.com/The-OpenROAD-Project/OpenSTA
    
.. image:: /picture/opensta.png
    :width: 500

Ngspice Installation
~~~~~~~~~~~~~~~

| Download tarball from https://sourceforge.net/projects/ngspice/files/

.. code-block:: console

    tar -zxvf ngspice-37.tar.gz
    cd ngspice-37
    mkdir release
    cd release
    ../configure  --with-x --with-readline=yes --disable-debug
    make
    sudo make install

.. image:: /picture/ngspice.jpg
    :width: 500
    
    
Iverilog Installation
~~~~~~~~~~~~~
.. code-block:: console

    sudo apt-get install iverilog
    
Gtkwave Installation
~~~~~~~~~~~~
  
.. code-block:: console

    sudo apt install gtkwave
    
    
Day1
----------

Introduction to iverilog design testbench
~~~~~~~~~~~~~~~~~

| Simulator - Tools check for design (RTL)
| Design - Verilog code which has the intend functionality to the specification
| Testbench - Setup to apply stimulus to the design to check its functionality

| Iverilog Flow
| The verilog will process the design and testbench and dump it to vcd file. This file will be use for generate waveforms

.. image:: /picture/day1_intro_1.jpg
    :width: 500

Labs using iverilog and gtkwave
~~~~~~~~~~~~~~~~~

.. code-block:: console

    iverilog good_mux.v tb_good_mux.v
    ./a.out
    gtkwave tb_good_mux.vcd
    
.. image:: /picture/day1_iverilog_1.jpg
    :width: 500
  
Labs using Yosys and Sky130 PDKs
~~~~~~~~~~

| synthesizer is used to convert behavioral design RTL to a netlist which is gate level connection using technology library. Same testbench can be use in the netlist file.
.. code-block:: console

    read_liberty -lib lib/sky130_fd_sc_hd__tt_025C_1v80.lib 
    read_verilog verilog_files/good_mux.v
    synth -top good_mux 
    abc -liberty lib/sky130_fd_sc_hd__tt_025C_1v80.lib
    
.. image:: /picture/day1_yosys_4.jpg
    :width: 300
    
.. image:: /picture/day1_yosys_3.jpg
    :width: 300
   

.. code-block:: console

    show good_mux
    
.. image:: /picture/day1_yosys_2.jpg
    :width: 500

Day2
----------

Understanding .lib
~~~~~~~~~~~~~~~~

Library name: sky130_fd_sc_hd__tt_025C_1v80

* tt - Typical process from (slow, fast , typical)
* 025C - Temperature
* 1V80 - Voltage

Hierarchical vs Flat Synthesis
~~~~~~~~~

| Hierarchical
| Hierarchical design is a design which will consist the submodule

.. code-block:: console

    read_liberty -lib lib/sky130_fd_sc_hd__tt_025C_1v80.lib 
    read_verilog verilog_files/multiple_modules.v
    synth -top multiple_modules
    abc -liberty lib/sky130_fd_sc_hd__tt_025C_1v80.lib
    show multiple_modules
    
.. image:: /picture/day2_yosys_1.jpg
    :width: 300
   
.. image:: /picture/day2_yosys_3.jpg
    :width: 300
 
.. image:: /picture/day2_yosys_2.jpg
    :width: 400
   
.. image:: /picture/day2_yosys_4.jpg
    :width: 400
   
.. image:: /picture/day2_yosys_5.jpg
    :width: 400
    
| Flat
| Flat design is a design that will break the submodule and combine it become a module that without submodule

.. code-block:: console

    read_liberty -lib lib/sky130_fd_sc_hd__tt_025C_1v80.lib 
    read_verilog verilog_files/multiple_modules.v
    synth -top multiple_modules
    abc -liberty lib/sky130_fd_sc_hd__tt_025C_1v80.lib
    flatten
    show multiple_modules
    
.. image:: /picture/day2_yosys_7.jpg
    :width: 800
    
| Flat VS Hierarchical
| Figure below showing that the difference between flat and hierarchical. 
.. image:: /picture/day2_yosys_6.jpg
    :width: 400
    
    
Synthesis Simulation
~~~~~~~~~~~~~

Flops are used to eliminate the possible glitches generated by the different propagation delays of the signals in the combinational circuits. So, even the input of the flop will be glitchy the output will be stable.

Asynchronous

.. code-block:: console

    iverilog dff_asyncres.v tb_dff_asyncres.v
    ./a.out
    gtkwave tb_dff_asyncres.vcd
    
.. image:: /picture/day2_synthesis_1.jpg
    :width: 600
    
Asynchronous set

.. code-block:: console

    iverilog dff_async_set.v tb_dff_async_set.v
    ./a.out
    gtkwave tb_dff_async_set.vcd
    
.. image:: /picture/day2_synthesis_2.jpg
    :width: 600
    
Synchronous

.. code-block:: console

    verilog dff_syncres.v tb_dff_syncres.v 
    ./a.out 
    gtkwave tb_dff_syncres.vcd
    
.. image:: /picture/day2_synthesis_3.jpg
    :width: 600
    
Various Flop Coding Styles and optimization
~~~~~~~~~~~~
mult2

.. code-block:: console

    read_liberty -lib lib/sky130_fd_sc_hd__tt_025C_1v80.lib 
    read_verilog verilog_files/mult_2.v 
    synth -top mul2 
    abc -liberty lib/sky130_fd_sc_hd__tt_025C_1v80.lib 
    show

.. image:: /picture/day2_opt_1.jpg
    :width: 400
    
.. image:: /picture/day2_opt_2.jpg
    :width: 400
    
.. image:: /picture/day2_opt_3.jpg
    :width: 400
    
mult8

.. code-block:: console

    read_liberty -lib lib/sky130_fd_sc_hd__tt_025C_1v80.lib 
    read_verilog verilog_files/mult_8.v 
    synth -top mult8
    show
    
.. image:: /picture/day2_opt_5.jpg
    :width: 400
    
.. image:: /picture/day2_opt_4.jpg
    :width: 400
    
Day3
----------
